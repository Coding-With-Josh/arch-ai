generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  websiteRole   WebsiteRole       @default(USER)
  subscription  UserSubscription?
  isActive      Boolean           @default(false)
  hasCompletedOnboarding Boolean @default(false)
  workspaces    Workspace[]
  workspacesInvitations WorkspaceInvitation[] @relation("UserInvitations")
  transactions Transaction[] @relation("TransactionUser")
  transactionsReceived Transaction[] @relation("TransactionRecipient")
  web3Wallets    Web3Wallet[]
  accounts      Account[]
  sessions      Session[]
  workspaceMemberships WorkspaceMembership[]
  
  tokens Token[]
}

model Transaction {
  id          String   @id @default(cuid())
  recipientId String
  userId      String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Status   @default(INACTIVE)
  recipient   User     @relation("TransactionRecipient", fields: [recipientId], references: [id])
  user        User     @relation("TransactionUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  user User @relation(fields: [identifier], references: [id], onDelete: Cascade)
}

model Web3Wallet {
  id          String   @id @default(cuid())
  userId      String
  address     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        walletType
  balance    Float    @default(0.0)
  status      Status   @default(INACTIVE)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum walletType {
  ETHEREUM
SUI
  SOLANA
  MULTICHAIN
}
 
model Workspace {
  id           String                 @id @default(cuid())
  name         String
  ownerId      String
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  owner        User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  memberships  WorkspaceMembership[]
  invitations  WorkspaceInvitation[]
  projects     Project[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspaceId String
  studios     Studio[]
  editors     Editor[]
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

}

model Studio {
  id          String        @id @default(cuid())
  name        String
  description String?
  slug        String? @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Editor {
  id          String        @id @default(cuid())
  name        String
  description String?
  slug        String? @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model WorkspaceMembership {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  createdAt   DateTime      @default(now())
  status     Status @default(INACTIVE)
  updatedAt   DateTime      @updatedAt

  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

enum Status {
  ACTIVE
  MUCH_ACTIVE
  INACTIVE
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  workspaceId String
  email       String
  role        WorkspaceRole @default(MEMBER)
  token       String        @unique
  status InvitationStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  expiresAt   DateTime
  
  userId    String?
  user      User?   @relation("UserInvitations", fields: [userId], references: [id], onDelete: Cascade)
  
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum WorkspaceRole {
  ADMIN
  MEMBER
  GUEST
}

model UserSubscription {
  userId         String @unique
  subscriptionId String             @unique
  method         SubscriptionMethod
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SubscriptionMethod {
  STRIPE
  WEB3
}

enum WebsiteRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
